{"version":3,"sources":["app.js","app.routes.js","controllers/mainCtrl.js","services/authService.js"],"names":["angular","module","config","$httpProvider","interceptors","push","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","$rootScope","$location","Auth","vm","this","loggedIn","isLoggedIn","$on","event","console","log","location","path","getUser","then","node","user","data","$","animate","scrollTop","doLogin","processing","error","login","loginData","username","password","success","message","doLogout","logout","factory","$http","$q","AuthToken","authFactory","post","setToken","token","getToken","get","cache","reject","$window","authTokenFactory","localStorage","getItem","setItem","removeItem","interceptorFactory","request","headers","responseError","response","status"],"mappings":"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","file":"zeph.epk.min.js","sourcesContent":["angular.module('epk',\r\n\t\t\t   [\r\n\t\t\t\t\t'app.routes',\r\n\t\t\t\t\t'ngAnimate',\r\n\t\t\t\t\t//'xeditable',\r\n\t\t\t\t\t'authService',\r\n\t\t\t\t\t'mainCtrl'\r\n\t\t\t   ])\r\n\t\t.config(function($httpProvider) {\r\n\t\t\t$httpProvider.interceptors.push('AuthInterceptor');\r\n\t\t});\r\n\t\t\r\n\t\t","angular.module('app.routes', ['ngRoute'])\r\n\t.config(function ($routeProvider, $locationProvider) {\r\n\t\t$routeProvider\r\n\t\t\t.when('/admin', {\r\n\t\t\t\ttemplateUrl : './views/home.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/login', {\r\n\t\t\t\ttemplateUrl : './views/users/login.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'login'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/users', {\r\n\t\t\t\ttemplateUrl : './views/users/all.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'main'\r\n\t\t\t\t//controller  : 'userController',\r\n\t\t\t\t//controllerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/users/new', {\r\n\t\t\t\ttemplateUrl : './views/users/create.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'main'\r\n\t\t\t\t//controller  : 'userCreateController',\r\n\t\t\t\t//controllerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/users/:userId', {\r\n\t\t\t\ttemplateUrl : './views/users/edit.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'main'\r\n\t\t\t\t//controller  : 'userEditController',\r\n\t\t\t\t//controllerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/profile', {\r\n\t\t\t\ttemplateUrl : './views/users/profile.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'main'\r\n\t\t\t\t//controller  : 'userProfileController',\r\n\t\t\t\t//controllerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/admin/whoa-bro', {\r\n\t\t\t\ttemplateUrl : './views/403.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'main'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/admin'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$locationProvider.html5Mode(true);\r\n\t});\r\n\t","angular.module('mainCtrl', ['angularMoment'])\r\n\r\n.controller('mainController', function($rootScope, $location, Auth) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get info if a person is logged in\r\n\tvm.loggedIn = Auth.isLoggedIn();\r\n\t\r\n\t\r\n\t// check to see if a user is logged in on every request\r\n\t$rootScope.$on('$routeChangeStart', function(event) {\r\n\t\tvm.loggedIn = Auth.isLoggedIn();\t\r\n\t\tconsole.log('route change');\r\n\t\tif (vm.loggedIn) {\r\n\t\t\tvm.location = $location.path();\r\n\t\t\tAuth.getUser()\r\n\t\t\t.then(function(node) {\r\n\t\t\t\tvm.user = node.data\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tif ( $location.path() == '/admin/login' ) {\r\n\t\t\t\t$location.path('/admin');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if ( $location.path() == '/admin/login' ) {\r\n\t\t\t// do nothing;\r\n\t\t} else {\r\n\t\t\t$location.path('/admin/login');\r\n\t\t}\r\n\t\t// get user information on page load\r\n\t\t\r\n\t});\r\n\t\r\n\t// resets the view to the top of the page when a new route loads\r\n\t// this prevents the view focus from staying the same from page to page\r\n\t$rootScope.$on('$routeChangeSuccess',function() { \r\n\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t});\r\n\r\n\t// function to handle login form\r\n\tvm.doLogin = function() {\r\n\t\tvm.processing = true;\r\n\r\n\t\t// clear the error\r\n\t\tvm.error = '';\r\n\r\n\t\tAuth.login(vm.loginData.username, vm.loginData.password)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvm.user = vm.loginData.username;\r\n\t\t\t\t\r\n\t\t\t\t// if a user successfully logs in, redirect to tickets page\r\n\t\t\t\tif (data.success)\t\t\t\r\n\t\t\t\t\t$location.path('/');\r\n\t\t\t\telse \r\n\t\t\t\t\tvm.error = data.message;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t};\r\n\r\n\t// function to handle logging out\r\n\tvm.doLogout = function() {\r\n\t\tAuth.logout();\r\n\t\tvm.user = null;\r\n\t\t\r\n\t\t$location.path('/admin/login');\r\n\t};\r\n\r\n});","// Courtesy of Scotch.io Chris Sevilleja & Holly Lloyd\r\n// http://leanpub.com/mean-machine\r\n\r\nangular.module('authService', [])\r\n\r\n// ===================================================\r\n// auth factory to login and get information\r\n// inject $http for communicating with the API\r\n// inject $q to return promise objects\r\n// inject AuthToken to manage tokens\r\n// ===================================================\r\n.factory('Auth', function($http, $q, AuthToken) {\r\n\r\n\t// create auth factory object\r\n\tvar authFactory = {};\r\n\r\n\t// log a user in\r\n\tauthFactory.login = function(username, password) {\r\n\r\n\t\t// return the promise object and its data\r\n\t\treturn $http.post('/api/authenticate', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tAuthToken.setToken(data.token);\r\n       \t\t\treturn data;\r\n\t\t\t});\r\n\t};\r\n\r\n\t// log a user out by clearing the token\r\n\tauthFactory.logout = function() {\r\n\t\t// clear the token\r\n\t\tAuthToken.setToken();\r\n\t};\r\n\r\n\t// check if a user is logged in\r\n\t// checks if there is a local token\r\n\tauthFactory.isLoggedIn = function() {\r\n\t\tif (AuthToken.getToken()) \r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\t\r\n\t};\r\n\r\n\t// get the logged in user\r\n\tauthFactory.getUser = function() {\r\n\t\tif (AuthToken.getToken())\r\n\t\t\treturn $http.get('/api/me', { cache: false });\r\n\t\telse\r\n\t\t\treturn $q.reject({ message: 'User has no token.' });\t\t\r\n\t};\r\n\r\n\t// return auth factory object\r\n\treturn authFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// factory for handling tokens\r\n// inject $window to store token client-side\r\n// ===================================================\r\n.factory('AuthToken', function($window) {\r\n\r\n\tvar authTokenFactory = {};\r\n\r\n\t// get the token out of local storage\r\n\tauthTokenFactory.getToken = function() {\r\n\t\treturn $window.localStorage.getItem('token');\r\n\t};\r\n\r\n\t// function to set token or clear token\r\n\t// if a token is passed, set the token\r\n\t// if there is no token, clear it from local storage\r\n\tauthTokenFactory.setToken = function(token) {\r\n\t\tif (token)\r\n\t\t\t$window.localStorage.setItem('token', token);\r\n\t \telse\r\n\t\t\t$window.localStorage.removeItem('token');\r\n\t};\r\n\r\n\treturn authTokenFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// application configuration to integrate token into requests\r\n// ===================================================\r\n.factory('AuthInterceptor', function($q, $location, AuthToken) {\r\n\r\n\tvar interceptorFactory = {};\r\n\r\n\t// this will happen on all HTTP requests\r\n\tinterceptorFactory.request = function(config) {\r\n\r\n\t\t// grab the token\r\n\t\tvar token = AuthToken.getToken();\r\n\r\n\t\t// if the token exists, add it to the header as x-access-token\r\n\t\tif (token) \r\n\t\t\tconfig.headers['x-access-token'] = token;\r\n\t\t\r\n\t\treturn config;\r\n\t};\r\n\r\n\t// happens on response errors\r\n\tinterceptorFactory.responseError = function(response) {\r\n\r\n\t\t// if our server returns a 403 forbidden response\r\n\t\tif (response.status == 401) {\r\n\t\t\tAuthToken.setToken();\r\n\t\t\t$location.path('/admin/login');\r\n\t\t} else if (response.status == 403) {\r\n\t\t\t$location.path('/forbidden');\r\n\t\t}\r\n\r\n\t\t// return the errors from the server as a promise\r\n\t\treturn $q.reject(response);\r\n\t};\r\n\r\n\treturn interceptorFactory;\r\n\t\r\n});"],"sourceRoot":"/source/"}